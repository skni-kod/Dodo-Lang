#include "GenerateCode.hpp"
#include "ParserVariables.hpp"
#include <fstream>
#include <iostream>
#include <filesystem>
namespace fs = std::filesystem;

const char *CodeException::what() {
    return "Code generation failed!";
}

void CodeError(const std::string message) {
    std::cout << "ERROR! Code generation failed : " << message << "\n";
    throw new CodeException;
}

void GenerateFunction(const std::string& identifier, std::ofstream& out) {
    if (identifier == "main") {
        out << "_start:\n";
    }
    else {
        out << identifier << ":\n";
        if (TargetArchitecture == "X86-64") {
            out << "pushq   %rbp\n";
            out << "movq    %rsp, %rbp\n";
        }
        else if (TargetArchitecture == "X86-32") {
            out << "pushd   %ebp\n";
            out << "movd    %esp, %ebp\n";
        }
    }
    const ParserFunction* function = &parserFunctions[identifier];
    // return logic will be changed, probably
    bool didReturn = false;
    for (const auto& current : function->instructions) {
        switch (current.type) {
            case FunctionInstruction::Type::returnValue:
                // TODO: Change 0 to value
                if (identifier == "main") {
                    if (TargetArchitecture == "X86-64") {
                        out << "movq    $60, %rax\n";
                        out << "movq    $0, %rdi\n";
                        out << "syscall\n";
                    }
                    else if (TargetArchitecture == "X86-32") {
                        out << "movl    $1, %eax\n";
                        out << "movl    $0, %ebx\n";
                        out << "int     $80\n";
                    }
                }
                else {
                    if (TargetArchitecture == "X86-64") {
                        out << "movq    $0, %rax\n";
                        out << "popq    %rbp\n";
                        out << "ret\n";
                    }
                    else if (TargetArchitecture == "X86-32") {
                        out << "movl    $0, %eax\n";
                        out << "popl    %ebp\n";
                        out << "ret\n";
                    }
                }
                didReturn = true;
                break;
        }
    }

    if (not didReturn) {
        if (identifier == "main") {
            if (TargetArchitecture == "X86-64") {
                out << "movq    $60, %rax\n";
                out << "movq    $0, %rdi\n";
                out << "syscall\n";
            }
            else if (TargetArchitecture == "X86-32") {
                out << "movl    $1, %eax\n";
                out << "movl    $0, %ebx\n";
                out << "int     $80\n";
            }
        }
        else {
            if (TargetArchitecture == "X86-64") {
                out << "movq    $0, %rax\n";
                out << "popq    %rbp\n";
                out << "ret\n";
            }
            else if (TargetArchitecture == "X86-32") {
                out << "movl    $0, %eax\n";
                out << "popl    %ebp\n";
                out << "ret\n";
            }
        }
    }
}

void GenerateCode() {
    std::ofstream out;
    if (!fs::is_directory("build")) {
        fs::create_directory("build");
    }
    out.open("build/out.s");
    if (!out.is_open()) {
        CodeError("Failed to open output .asm file");
    }

    out << "# Generated by dodo lang compiler by SKNI \"KOD\"\n";

    out << ".data\n";
    // ...
    out << ".text\n";
    // ...
    out << ".global _start\n";
    // ...
    GenerateFunction("main", out);
}


