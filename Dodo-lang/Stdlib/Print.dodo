// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
// ┃ This file contains printing functions for standard types.                                 ┃
// ┃ Last revision: 04.10.2025                                                                 ┃
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

import "String.dodo";

void Print(let u64 length, let char* message) {
    syscall(1, 0, message, length);
    return;
}

void Println(let u64 length, let char* message) {
    syscall(1, 0, message, length);
    syscall(1, 0, "\n", 1);
    return;
}

void Println(let char* message) {
    let mut String string = String(message);
    Println(string);
    return;
}

void Print(let char* message) {
    let mut String string = String(message);
    Print(string);
    return;
}

void Print(let String str) {
    syscall(1, 0, str._text, str.length);
    return;
}

void Println(let String str) {
    syscall(1, 0, str._text, str.length);
    syscall(1, 0, "\n", 1);
    return;
}

void Println(let i32 number) {
    Print(number);
    syscall(1, 0, "\n", 1);
    return;
}

void Print(let mut i32 number) {
    if (number < 0) {
        syscall(1, 0, "-", 1);
        number = number * -1;
    }
    if (number == 0) {
        syscall(1, 0, "0", 1);
    }
    else {
        let mut i32 base = 1000000000;

        //while (base > 0) {
        //    if (base <= number) {
        //        let mut char digit = (number / base) convert char;
        //        digit = digit + '0';
        //        syscall(1, 0, &digit, 1);
        //        number = number % base;
        //    }
        //    base = base / 10;
        //}
    }
    return;
}


